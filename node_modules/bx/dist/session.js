import os from 'node:os';
import path from 'node:path';
import fs from 'node:fs/promises';
import { attach } from 'webdriverio';
const SESSION_DIR = process.env.TMPDIR || os.tmpdir();
const SESSION_FILE_PREFIX = 'bx_session_';
function getSessionFilePath(sessionName) {
    return path.join(SESSION_DIR, `${SESSION_FILE_PREFIX}${sessionName}.json`);
}
/**
 * @description To allow run scripts faster, user can keep a browser session around.
 *              This class is responsible for managing the session.
 */
export async function loadSession(sessionName) {
    const sessionFilePath = getSessionFilePath(sessionName);
    const sessionExists = await fs.access(sessionFilePath).then(() => true, () => false);
    if (!sessionExists) {
        throw new Error(`Session "${sessionName}" not found`);
    }
    const session = JSON.parse(await fs.readFile(sessionFilePath, 'utf8'));
    return attach({ ...session.options, ...session });
}
export async function saveSession(browser, sessionName) {
    const { capabilities, requestedCapabilities, sessionId, options } = browser;
    await fs.writeFile(getSessionFilePath(sessionName), JSON.stringify({ name: sessionName, capabilities, requestedCapabilities, sessionId, options }));
}
export async function listSessions() {
    const files = await fs.readdir(SESSION_DIR);
    const sessionFiles = [];
    for (const file of files) {
        if (file.startsWith(SESSION_FILE_PREFIX)) {
            const session = JSON.parse(await fs.readFile(path.join(SESSION_DIR, file), 'utf8'));
            sessionFiles.push(session);
        }
    }
    return sessionFiles;
}
export async function deleteSession(sessionName) {
    if (!sessionName) {
        throw new Error('Please provide a session name');
    }
    const sessionFilePath = getSessionFilePath(sessionName);
    const sessionExists = await fs.access(sessionFilePath).then(() => true, () => false);
    if (!sessionExists) {
        throw new Error(`Session "${sessionName}" not found`);
    }
    const session = await loadSession(sessionName);
    return Promise.all([
        fs.unlink(sessionFilePath),
        session.deleteSession()
    ]);
}
export async function deleteAllSessions() {
    const files = await fs.readdir(SESSION_DIR);
    return Promise.all(files.map(async (file) => {
        if (!file.startsWith(SESSION_FILE_PREFIX)) {
            return;
        }
        const sessionName = path.basename(file, path.extname(file)).replace(SESSION_FILE_PREFIX, '');
        const session = await loadSession(sessionName);
        return Promise.all([
            fs.unlink(path.join(SESSION_DIR, file)),
            session.deleteSession()
        ]);
    }));
}
