var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _ViteServer_server, _ViteServer_options;
import fs from 'node:fs/promises';
import path from 'node:path';
import { createServer } from 'vite';
const __dirname = path.dirname(new URL(import.meta.url).pathname);
const virtualModuleId = 'virtual:inline';
const resolvedVirtualModuleId = '\0' + virtualModuleId;
const DEFAULT_OPTIONS = {
    configFile: false,
    server: { host: 'localhost', port: 0 },
    logLevel: 'silent'
};
export class ViteServer {
    constructor(options) {
        _ViteServer_server.set(this, void 0);
        _ViteServer_options.set(this, void 0);
        __classPrivateFieldSet(this, _ViteServer_options, {
            ...DEFAULT_OPTIONS,
            ...options,
        }, "f");
    }
    async start(target) {
        let onConnectHandler = () => { };
        const connectPromise = new Promise((resolve) => {
            onConnectHandler = resolve;
        });
        __classPrivateFieldSet(this, _ViteServer_server, await createServer({
            ...__classPrivateFieldGet(this, _ViteServer_options, "f"),
            plugins: [await instrument(target, onConnectHandler)]
        }), "f");
        await __classPrivateFieldGet(this, _ViteServer_server, "f").listen();
        return {
            url: `http://localhost:${__classPrivateFieldGet(this, _ViteServer_server, "f").config.server.port}`,
            connectPromise,
            server: __classPrivateFieldGet(this, _ViteServer_server, "f")
        };
    }
    async stop() {
        await __classPrivateFieldGet(this, _ViteServer_server, "f")?.close();
    }
}
_ViteServer_server = new WeakMap(), _ViteServer_options = new WeakMap();
async function instrument(target, onConnect) {
    const instrumentation = await fs.readFile(path.resolve(__dirname, 'browser', 'index.js'), 'utf-8');
    const sendFinishEvent = `requestAnimationFrame(() => import.meta.hot?.send('bx:event', { name: 'doneEvent' }))`;
    return {
        name: 'instrument',
        enforce: 'pre',
        resolveId(id) {
            if (id === virtualModuleId) {
                return resolvedVirtualModuleId;
            }
            return null;
        },
        load(id) {
            if (typeof target === 'string' && id === resolvedVirtualModuleId) {
                return target;
            }
            if (typeof target === 'function' && id === resolvedVirtualModuleId) {
                return `export default await (${target.toString()})()`;
            }
            return null;
        },
        transform: (code, id) => {
            if (id === target) {
                return {
                    code: `${code}\n${sendFinishEvent}`
                };
            }
            return null;
        },
        configureServer(server) {
            server.middlewares.use(async (req, res, next) => {
                /**
                 * don't return test page when sourcemaps are requested
                 */
                if (!req.originalUrl || req.originalUrl !== '/' || req.url?.endsWith('.map') || req.url?.endsWith('.wasm')) {
                    return next();
                }
                const code = typeof target === 'string' && (target.startsWith('./') || target.startsWith('/'))
                    ? path.extname(target) === '.html'
                        ? await fs.readFile(target, 'utf-8')
                        : `<script type="module" src="/@fs${path.resolve(process.cwd(), target)}"></script>`
                    : `<script type="module">
                        import * as target from '${virtualModuleId}';
                        import.meta.hot?.send('bx:event', {
                            name: 'doneEvent',
                            result: target.default
                        })
                    </script>`;
                const template = `
                    <!DOCTYPE html>
                    <html>
                    <script type="module">${instrumentation}</script>
                    ${code}
                    ${typeof target === 'string' && path.extname(target) === '.html'
                    ? `<script type="module">${sendFinishEvent}</script>`
                    : ''}
                `;
                res.end(await server.transformIndexHtml(`${req.originalUrl}`, template));
            });
            server.hot.on('connection', onConnect);
            server.hot.on('bx:event', (message) => {
                if (message.name === 'consoleEvent') {
                    return handleConsole(message);
                }
            });
        }
    };
}
function handleConsole(message) {
    console[message.type](...message.args);
}
